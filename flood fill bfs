import java.util.*;

class Pair {
    int row;
    int col;

    Pair(int _row, int _col) {
        this.row = _row;
        this.col = _col;
    }
}

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        if (image[sr][sc]==newColor) return image;
        int n = image.length;
        int m = image[0].length;
        Queue<Pair> q = new LinkedList<>();
        int[][] vis = new int[n][m];
        int drow[] = {-1, 0, 1, 0};
        int dcol[] = {0, 1, 0, -1};
        int originalColor = image[sr][sc];
        q.add(new Pair(sr, sc));
        vis[sr][sc] = newColor; 

        while (!q.isEmpty()) {
            int r = q.peek().row;
            int c = q.peek().col;
            q.remove();
            for (int i = 0; i < 4; i++) {
                int nrow = r + drow[i];
                int ncol = c + dcol[i];
                if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m && vis[nrow][ncol] == 0 && image[nrow][ncol] == originalColor) {
                    q.add(new Pair(nrow, ncol));
                    vis[nrow][ncol] = newColor; 
                }
            }
        }
         for(int i=0; i<n;i++){
            for(int j=0; j<m;j++){
                
                vis[i][j]=Math.max(vis[i][j], image[i][j]);
                
            }
        }
        return vis; 
    }
}
