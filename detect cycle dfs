import java.util.List;
public class Solution {
    static class Graph {
        boolean dfs(int node, int parent, boolean [] vis, List<List<Integer>> adj){
            vis[node] = true;
            for (int it: adj.get(node)){
                if (vis[it]==false){
                    vis[it]=true;
                    if (dfs(it, node, vis, adj)==true){
                        return true;
                    }
                    
                }
                else if(parent!=it){
                        return true;
                    }
            }
            return false;
        }
        boolean detectCycle(int V, List<List<Integer>> adj) {
            // Write your code here.
            boolean vis[] = new boolean[V];
            for (int i =0; i<V; i++){
                vis[i]= false;

            }
            for (int i =0; i<V; i++){
                if (vis[i]==false){
                    if (dfs(i, -1, vis, adj)) return true;
                }

            }
            return false;
        }
    };
}
