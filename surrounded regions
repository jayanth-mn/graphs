class Solution {
    public void dfs(int row, int col, int vis[][], char mat[][], int delrow[], int delcol[]){
        vis[row][col] =1;
        int n = mat.length;
        int m = mat[0].length;
        
        for (int i=0; i<4; i++){
            int nrow = row + delrow[i];
            int ncol = col + delcol[i];
            if (nrow >= 0 && nrow < n && ncol >= 0 && ncol<m && vis[nrow][ncol]==0 && mat[nrow][ncol]=='O'){
                dfs(nrow, ncol, vis, mat, delrow, delcol);
            }
        }
    }
    public void solve(char[][] board) {
        int delrow []= {-1,0,1,0};
        int delcol []= {0,1,0,-1};
        int n=board.length;
        int m = board[0].length;
        int vis[][] = new int[n][m];
        
        for(int j=0; j<m; j++){
            if (vis[0][j]==0 && board[0][j]=='O'){
                dfs(0,j, vis, board,delrow, delcol);
            }
            if (vis[n-1][j]==0 && board[n-1][j]=='O'){
                dfs(n-1,j, vis, board,delrow, delcol);
            }
        }
        for (int k=0; k<n; k++){
            if (vis[k][0]==0 && board[k][0]=='O'){
                dfs(k,0, vis, board,delrow, delcol);
            }
            if (vis[k][m-1]==0 && board[k][m-1]=='O'){
                dfs(k,m-1, vis, board,delrow, delcol);
            }
        }
        for (int i=0; i<n; i++){
            for (int j=0; j<m; j++){
                if (vis[i][j]==0 && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }
        
    }
}
