import java.util.*;

class Solution {
    public void dfs(int node, ArrayList<ArrayList<Integer>> adj, int vis[], int path[], List<Integer> ans) {
        vis[node] = 1;
        path[node] = 1;

        for (int it : adj.get(node)) {
            if (vis[it] == 0) {
                dfs(it, adj, vis, path, ans);
                if (ans.isEmpty()) return; // Stop DFS if cycle detected
            } else if (path[it] == 1) {
                ans.clear(); // Clear result if cycle detected
                return;
            }
        }
        ans.add(node);
        path[node] = 0;
    }

    public int[] findOrder(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        List<Integer> ans = new ArrayList<>();

        for (int i = 0; i < numCourses; i++) {
            adj.add(new ArrayList<>());
        }

        for (int[] prerequisite : prerequisites) {
            adj.get(prerequisite[1]).add(prerequisite[0]);
        }

        int vis[] = new int[numCourses];
        int path[] = new int[numCourses];

        for (int i = 0; i < numCourses; i++) {
            if (vis[i] == 0) {
                dfs(i, adj, vis, path, ans);
                if (ans.isEmpty()) return new int[0]; // Cycle detected
            }
        }

        Collections.reverse(ans);
        return ans.stream().mapToInt(i -> i).toArray();
    }
}
